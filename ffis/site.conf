{
	--[[	Community settings
		hostname_prefix:	Nodename prefix eg. freifunk-abcdef123456 (hex-part is generated from node's MAC address)
		site_name:		Name of your community
		site_code:		Shortcode of your community
	]]

	hostname_prefix = 'FF-IS',
	site_name = 'Freifunk Fichtenfunk (FFFF)',
	site_code = 'ffis',
	

	--[[	Package Repository	]]
	opkg = {
		openwrt = 'http://openwrt.draic.info/%n/%v/%S/packages',
	},


	--[[	General network settings
		prefix4:			IPv4 range of your community
		prefix6:			IPv6 range of your community
			is also required for radvd

		We use our global unicast block  2a03:2260:120::/48 for IP routing. This prefix is ONLY used for the next node feature and is used in multiple layer 2 network segments.
	]]

	prefix4 = '172.16.0.0/16',
	prefix6 = '2a03:2260:120::/48',


	--[[	NTP settings
		Synchronize the time of the nodes
		timezone:			Timezone of your community
		http://wiki.openwrt.org/doc/uci/system#time.zones
		ntp_servers:	List of NTP-Servers to query. You can use any public and/or your private NTP-Servers of your community.
		http://www.pool.ntp.org/zone/de
	]]
	
	timezone = 'CET-1CEST,M3.5.0,M10.5.0/3', -- Europe/Berlin
	ntp_servers = {
					'0.openwrt.pool.ntp.org',
					'1.openwrt.pool.ntp.org',
					'2.openwrt.pool.ntp.org',
					'3.openwrt.pool.ntp.org',
	},

	
	--[[	Wireless settings
		regdom:			IEEE 802.11 Regulatory Domain
		http://en.wikipedia.org/wiki/IEEE_802.11#Regulatory_domains_and_legal_compliance
		wifi24:			Wifi settings for 2.4 GHz frequency devices
		wifi5:			Wifi settings for 5 GHz frequency devices
			sub
			ssid:			Wifi name shown to the user (We recommend %site_code%.freifunk.net)
			channel:		Wifi channel to use
			htmode:			Specifies the channel width in 802.11n and 802.11ac mode, possible values are:
						HT20 (single 20MHz channel),
						HT40- (2x 20MHz channels, primary/control channel is upper, secondary channel is below)
						HT40+ (2x 20MHz channels, primary/control channel is lower, secondary channel is above).
						VHT20 / VHT40 / VHT80 / VHT160 (channel width in 802.11ac, extra channels are picked according to the specification)
		http://wiki.openwrt.org/doc/uci/wireless#common.options (-> htmode)
		mesh_ssid:		SSID of the mesh-interface, only used between nodes
		mesh_bssid:		BSSID of the mesh-interface
	                        	The supplied default of ff:ff:ff:ff:ff:ff will not work.
	                        	You'll need to replace it with randomly generated, non-broadcast BSSID!
		mesh_mcast_rate:	multicast rate of the mesh-interface
	]]

	regdom = 'DE',

	wifi24 = {
		channel = 13,
		htmode = 'HT20',
		ap = {
			ssid = 'Freifunk',
		},
		ibss = {
			ssid = 'mesh.ffff',
			bssid = '02:ff:13:37:fe:03',
			mcast_rate = 12000,
		},
	},

	wifi5 = {
		channel = 44,
		htmode = 'HT20',
		ap = {
			ssid = 'Freifunk (5GHz)',
		},
		ibss = {
			ssid = 'mesh.ffff',
			-- ACHTUNG: Subtile Unterschiede zur 2.4GHz bssid beachten!
			bssid = '02:ff:13:37:fe:04',
			mcast_rate = 12000,
		},
	},

	next_node = {
		ip4 = '172.16.254.254',
		ip6 = '2a03:2260:120::cafe',
		mac = '16:41:95:40:f7:dc',
	},


	--[[	Gateway settings
		fastd_mesh_vpn:	fastd vpn settings
		https://projects.universe-factory.net/projects/fastd/wiki/User_manual
			sub
			methods:		encryption algorithms to use
			https://projects.universe-factory.net/projects/fastd/wiki/Methods
			When multiple method statements are given, the first one has the highest preference.
			mtu:			package size
			groups:			Backbone groups
				sub
				backbone:		fastd vpn gateways of your community
				limit:			Number of gateways each node connects to
				On startup, each node tries to connect to every gateway, and then chooses the number of 'limit' fastest gateways it could reach
				peers:			Gateways
		sub sub
	key:			public fastd key of your gateway
		https://github.com/tcatm/ecdsautils
	remotes:		List of fastd configuration strings to connect to your gateway server
	]]
	fastd_mesh_vpn = {
		methods = {'salsa2012+umac', 'salsa2012+gmac'},
		mtu = 1280,
		groups = {
			backbone = {limit = 0, peers = {},},
			backbone_1 = {
				limit = 1,
				peers = {
					node01 = {
						key = '962b43a7b2987a0f29e7205df464343156ad9285d5997ed3be1698d8091ac392',
						remotes = {
							'"iserlohn-1.freifunk-mk.de" port 10000'
						},
					},
					node02 = {
						key = '20599c1a1d25c8ae02500a156a86d8b0b9fdbed4372b69ed52197d50fb0c8bed',
						remotes = {
							'"iserlohn-2.freifunk-mk.de" port 10000'
						},
					},
				},
			},
		},
		bandwidth_limit = {
			enabled = false,
			limit_egress = 500,
			limit_ingress = 8000,
		},
	},

	autoupdater = {
		branch = 'stable',
		branches = {
			stable = {
				name = 'stable',
				mirrors = {'http://firmware.freifunk-mk.de/iserlohn/stable/sysupgrade',
						'http://[2a03:2260:50:12:60e2:feff:fe2d:b8b3]/iserlohn/stable/sysupgrade',
						'http://[2001:41d0:2:b546::4]/iserlohn/stable/sysupgrade',},
				probability = 0.08,
				good_signatures = 1,
				pubkeys = {
					'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
					'7afe187ceb34e83b2cb33c244ab5c8a7e80829c3e83b8d3fc471d2642eb6a602', -- limlug
					'2a61930930a240c027f6ca4197203d400b6e4a32f9e92041e5f086907796c9bc', -- Adorfer
				},
			},
			beta = {
				name = 'beta',
				mirrors = {'http://firmware.freifunk-mk.de/iserlohn/beta/sysupgrade',
						'http://[2a03:2260:50:12:60e2:feff:fe2d:b8b3]/iserlohn/beta/sysupgrade',
						'http://[2001:41d0:2:b546::4]/iserlohn/beta/sysupgrade'},
				probability = 0.08,
				good_signatures = 1,
				pubkeys = {
					'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
					'7afe187ceb34e83b2cb33c244ab5c8a7e80829c3e83b8d3fc471d2642eb6a602', -- limlug
					'2a61930930a240c027f6ca4197203d400b6e4a32f9e92041e5f086907796c9bc', -- Adorfer
				},
			},
			experimental = {
				name = 'experimental',
				mirrors = {'http://firmware.freifunk-mk.de/iserlohn/experimental/sysupgrade',
						'http://[2a03:2260:50:12:60e2:feff:fe2d:b8b3]/iserlohn/experimental/sysupgrade',
						'http://[2001:41d0:2:b546::4]/iserlohn/experimental/sysupgrade'},
				probability = 0.08,
				good_signatures = 1,
				pubkeys = {
					'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
					'7afe187ceb34e83b2cb33c244ab5c8a7e80829c3e83b8d3fc471d2642eb6a602', -- limlug
					'2a61930930a240c027f6ca4197203d400b6e4a32f9e92041e5f086907796c9bc', -- Adorfer
				},
			},
		},
	},

	roles = {
		default = 'node',
		list = {
			node = 'Normal Node',
			gateway = 'Gateway Node',
			experimental = 'Experimental Node',
		},
	},

}
